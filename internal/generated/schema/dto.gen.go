// Package dto provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package dto

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AccessTokenScopes = "AccessToken.Scopes"
)

// Defines values for GetLLMCheckStatusValueStatus.
const (
	COMPLETED  GetLLMCheckStatusValueStatus = "COMPLETED"
	ERROR      GetLLMCheckStatusValueStatus = "ERROR"
	INPROGRESS GetLLMCheckStatusValueStatus = "IN_PROGRESS"
	NOTSTARTED GetLLMCheckStatusValueStatus = "NOT_STARTED"
)

// ApiError defines model for ApiError.
type ApiError struct {
	// ErrorCode Error unique code
	ErrorCode int `json:"error_code"`

	// ErrorMessage Error description
	ErrorMessage string `json:"error_message"`
}

// CreateTestQuestionAnswerPayload defines model for CreateTestQuestionAnswerPayload.
type CreateTestQuestionAnswerPayload struct {
	// IsCorrect Is answer correct
	IsCorrect bool `json:"is_correct"`

	// Number Answer number in the list
	Number int `json:"number"`

	// Text Answer text
	Text string `json:"text"`
}

// CreateTestQuestionPayload defines model for CreateTestQuestionPayload.
type CreateTestQuestionPayload struct {
	// Answers Question answers
	Answers []CreateTestQuestionAnswerPayload `json:"answers"`

	// Number Question number in the list
	Number int `json:"number"`

	// Text Question text
	Text string `json:"text"`
}

// CreateTestRequest defines model for CreateTestRequest.
type CreateTestRequest struct {
	// Description Test description
	Description *string `json:"description,omitempty"`

	// Name Test unique name
	Name string `json:"name"`

	// Questions Test questions
	Questions []CreateTestQuestionPayload `json:"questions"`
}

// GetLLMCheckResultLLMAnswer defines model for GetLLMCheckResultLLMAnswer.
type GetLLMCheckResultLLMAnswer struct {
	// QuestionNumber Question number in test
	QuestionNumber int `json:"question_number"`

	// SelectedAnswerNumber LLM selected answer number in questions list
	SelectedAnswerNumber int `json:"selected_answer_number"`
}

// GetLLMCheckResultResponse defines model for GetLLMCheckResultResponse.
type GetLLMCheckResultResponse struct {
	// Results Results of all LLM analyses
	Results []GetLLMCheckResultValue `json:"results"`
}

// GetLLMCheckResultValue defines model for GetLLMCheckResultValue.
type GetLLMCheckResultValue struct {
	// Answers LLM answers of the test questions
	Answers []GetLLMCheckResultLLMAnswer `json:"answers"`

	// LlmSlug Large language model unique name
	LlmSlug string `json:"llm_slug"`
}

// GetLLMCheckStatusResponse defines model for GetLLMCheckStatusResponse.
type GetLLMCheckStatusResponse struct {
	// Statuses Statuses of all LLM analyses
	Statuses []GetLLMCheckStatusValue `json:"statuses"`
}

// GetLLMCheckStatusValue defines model for GetLLMCheckStatusValue.
type GetLLMCheckStatusValue struct {
	// LlmSlug Large language model unique name
	LlmSlug string `json:"llm_slug"`

	// Status LLM analysis status
	Status GetLLMCheckStatusValueStatus `json:"status"`
}

// GetLLMCheckStatusValueStatus LLM analysis status
type GetLLMCheckStatusValueStatus string

// LaunchLLMCheckRequest defines model for LaunchLLMCheckRequest.
type LaunchLLMCheckRequest struct {
	// LlmSlug Large language model unique name
	LlmSlug string `json:"llm_slug"`
}

// LaunchLLMCheckResponse defines model for LaunchLLMCheckResponse.
type LaunchLLMCheckResponse struct {
	// LaunchIdentifier Launch identifier UUID v4
	LaunchIdentifier openapi_types.UUID `json:"launch_identifier"`
}

// QuestionAnswer defines model for QuestionAnswer.
type QuestionAnswer struct {
	// IsCorrect Is answer correct
	IsCorrect bool `json:"is_correct"`

	// Number Answer number in the list
	Number int `json:"number"`

	// Text Answer text
	Text string `json:"text"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	// UserLogin User unique login
	UserLogin string `json:"user_login"`

	// UserPasswordHash User password hash in SHA512
	UserPasswordHash string `json:"user_password_hash"`
}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	// UserLogin User unique login
	UserLogin string `json:"user_login"`

	// UserName User friendly name
	UserName string `json:"user_name"`

	// UserPasswordHash User password hash in SHA512
	UserPasswordHash string `json:"user_password_hash"`
}

// Test defines model for Test.
type Test struct {
	// Description Test description
	Description *string `json:"description,omitempty"`

	// Identifier Test identifier UUID v4
	Identifier openapi_types.UUID `json:"identifier"`

	// Name Test unique name
	Name string `json:"name"`

	// Questions Test questions
	Questions []TestQuestion `json:"questions"`
}

// TestQuestion defines model for TestQuestion.
type TestQuestion struct {
	// Answers Question answers
	Answers []QuestionAnswer `json:"answers"`

	// Number Question number in the list
	Number int `json:"number"`

	// Text Question text
	Text string `json:"text"`
}

// RefreshToken defines model for RefreshToken.
type RefreshToken = string

// TestId defines model for TestId.
type TestId = string

// AuthRefreshTokenParams defines parameters for AuthRefreshToken.
type AuthRefreshTokenParams struct {
	XLLMCheckerRefreshToken RefreshToken `json:"X-LLM-Checker-Refresh-Token"`
}

// TestsMyParams defines parameters for TestsMy.
type TestsMyParams struct {
	// PageNumber Pagination page number
	PageNumber *int `form:"page-number,omitempty" json:"page-number,omitempty"`

	// PageSize Pagination page size
	PageSize *int `form:"page-size,omitempty" json:"page-size,omitempty"`
}

// AuthSignInJSONRequestBody defines body for AuthSignIn for application/json ContentType.
type AuthSignInJSONRequestBody = SignInRequest

// AuthSignUpJSONRequestBody defines body for AuthSignUp for application/json ContentType.
type AuthSignUpJSONRequestBody = SignUpRequest

// TestCreateJSONRequestBody defines body for TestCreate for application/json ContentType.
type TestCreateJSONRequestBody = CreateTestRequest

// LlmLaunchJSONRequestBody defines body for LlmLaunch for application/json ContentType.
type LlmLaunchJSONRequestBody = LaunchLLMCheckRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Updating system access token using refresh token
	// (POST /api/v1/auth/refresh-token)
	AuthRefreshToken(w http.ResponseWriter, r *http.Request, params AuthRefreshTokenParams)
	// User login to the system with username and password
	// (POST /api/v1/auth/sign-in)
	AuthSignIn(w http.ResponseWriter, r *http.Request)
	// User registration in the system
	// (POST /api/v1/auth/sign-up)
	AuthSignUp(w http.ResponseWriter, r *http.Request)
	// Creating a new test
	// (PUT /api/v1/test/create)
	TestCreate(w http.ResponseWriter, r *http.Request)
	// Deleting an existing test
	// (DELETE /api/v1/test/{testId}/delete)
	TestDelete(w http.ResponseWriter, r *http.Request, testId TestId)
	// Getting complete information of a specific test
	// (GET /api/v1/test/{testId}/get)
	TestById(w http.ResponseWriter, r *http.Request, testId TestId)
	// Launching test analysis using a generative language model
	// (POST /api/v1/test/{testId}/llm/launch)
	LlmLaunch(w http.ResponseWriter, r *http.Request, testId TestId)
	// Getting all the test analysis results
	// (GET /api/v1/test/{testId}/llm/result)
	LlmResult(w http.ResponseWriter, r *http.Request, testId TestId)
	// Getting the current status of test analysis
	// (GET /api/v1/test/{testId}/llm/status)
	LlmStatus(w http.ResponseWriter, r *http.Request, testId TestId)
	// Getting "my" created tests
	// (GET /api/v1/tests/my)
	TestsMy(w http.ResponseWriter, r *http.Request, params TestsMyParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Updating system access token using refresh token
// (POST /api/v1/auth/refresh-token)
func (_ Unimplemented) AuthRefreshToken(w http.ResponseWriter, r *http.Request, params AuthRefreshTokenParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login to the system with username and password
// (POST /api/v1/auth/sign-in)
func (_ Unimplemented) AuthSignIn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User registration in the system
// (POST /api/v1/auth/sign-up)
func (_ Unimplemented) AuthSignUp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creating a new test
// (PUT /api/v1/test/create)
func (_ Unimplemented) TestCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deleting an existing test
// (DELETE /api/v1/test/{testId}/delete)
func (_ Unimplemented) TestDelete(w http.ResponseWriter, r *http.Request, testId TestId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Getting complete information of a specific test
// (GET /api/v1/test/{testId}/get)
func (_ Unimplemented) TestById(w http.ResponseWriter, r *http.Request, testId TestId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Launching test analysis using a generative language model
// (POST /api/v1/test/{testId}/llm/launch)
func (_ Unimplemented) LlmLaunch(w http.ResponseWriter, r *http.Request, testId TestId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Getting all the test analysis results
// (GET /api/v1/test/{testId}/llm/result)
func (_ Unimplemented) LlmResult(w http.ResponseWriter, r *http.Request, testId TestId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Getting the current status of test analysis
// (GET /api/v1/test/{testId}/llm/status)
func (_ Unimplemented) LlmStatus(w http.ResponseWriter, r *http.Request, testId TestId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Getting "my" created tests
// (GET /api/v1/tests/my)
func (_ Unimplemented) TestsMy(w http.ResponseWriter, r *http.Request, params TestsMyParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AuthRefreshToken operation middleware
func (siw *ServerInterfaceWrapper) AuthRefreshToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthRefreshTokenParams

	headers := r.Header

	// ------------- Required header parameter "X-LLM-Checker-Refresh-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-LLM-Checker-Refresh-Token")]; found {
		var XLLMCheckerRefreshToken RefreshToken
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-LLM-Checker-Refresh-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-LLM-Checker-Refresh-Token", runtime.ParamLocationHeader, valueList[0], &XLLMCheckerRefreshToken)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-LLM-Checker-Refresh-Token", Err: err})
			return
		}

		params.XLLMCheckerRefreshToken = XLLMCheckerRefreshToken

	} else {
		err := fmt.Errorf("Header parameter X-LLM-Checker-Refresh-Token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-LLM-Checker-Refresh-Token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthRefreshToken(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthSignIn operation middleware
func (siw *ServerInterfaceWrapper) AuthSignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthSignIn(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthSignUp operation middleware
func (siw *ServerInterfaceWrapper) AuthSignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthSignUp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestCreate operation middleware
func (siw *ServerInterfaceWrapper) TestCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestDelete operation middleware
func (siw *ServerInterfaceWrapper) TestDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testId" -------------
	var testId TestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "testId", runtime.ParamLocationPath, chi.URLParam(r, "testId"), &testId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "testId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestDelete(w, r, testId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestById operation middleware
func (siw *ServerInterfaceWrapper) TestById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testId" -------------
	var testId TestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "testId", runtime.ParamLocationPath, chi.URLParam(r, "testId"), &testId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "testId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestById(w, r, testId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LlmLaunch operation middleware
func (siw *ServerInterfaceWrapper) LlmLaunch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testId" -------------
	var testId TestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "testId", runtime.ParamLocationPath, chi.URLParam(r, "testId"), &testId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "testId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LlmLaunch(w, r, testId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LlmResult operation middleware
func (siw *ServerInterfaceWrapper) LlmResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testId" -------------
	var testId TestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "testId", runtime.ParamLocationPath, chi.URLParam(r, "testId"), &testId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "testId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LlmResult(w, r, testId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LlmStatus operation middleware
func (siw *ServerInterfaceWrapper) LlmStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "testId" -------------
	var testId TestId

	err = runtime.BindStyledParameterWithLocation("simple", false, "testId", runtime.ParamLocationPath, chi.URLParam(r, "testId"), &testId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "testId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LlmStatus(w, r, testId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TestsMy operation middleware
func (siw *ServerInterfaceWrapper) TestsMy(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, AccessTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TestsMyParams

	// ------------- Optional query parameter "page-number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-number", r.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-number", Err: err})
		return
	}

	// ------------- Optional query parameter "page-size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page-size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page-size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestsMy(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/refresh-token", wrapper.AuthRefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/sign-in", wrapper.AuthSignIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/sign-up", wrapper.AuthSignUp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/test/create", wrapper.TestCreate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/test/{testId}/delete", wrapper.TestDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/test/{testId}/get", wrapper.TestById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/test/{testId}/llm/launch", wrapper.LlmLaunch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/test/{testId}/llm/result", wrapper.LlmResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/test/{testId}/llm/status", wrapper.LlmStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tests/my", wrapper.TestsMy)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc23LbvBF+FQzaSyqSnPhGd47jpmrlP64kt53J79Eg5IpCQoI0ADphM3r3DgAexYMk",
	"n2JncJVQAPaMb7FLwj+xG4VxxIBJgSc/cUw4CUEC109zWHMQm2X0DZh6pgxP8AaIBxw7mJEQ8AT/dzCb",
	"XQ7ON+B+Az7IlgzMGgdzuE0oBw9PJE/AwcLdQEgUMZnGarmQnDIfb7cOXoKQU69gFBO5KdlIM3gMxW0+",
	"qJU5i+kF5xHXavIoBi4p6BFQP6/cyAP15IFwOY0ljZQQeglKGL1NAOkpTs6HMgk+cLx1MgohCEH8TiLV",
	"35wW9UvFPldF2qV+U6yNvnwFVyr+5xyIBGW/fyUgFIczJr4DvyJpEBGvqTIVKzfiXC1vSDsViOjVKJ9S",
	"cPwSRQEQpliyJPwCvLnaMEZmGFGG5AZQQIWiEpIfNExCPBmPHBxSZh5GbRaV8EN2EteDmtwMmC83eDI+",
	"NRSL530GzsTPGDlVgxxm4E7TGtuJpvD5SpTPcDCVEOqZf+WwxhP8l2G5HYdZ7A73OXerLTE1pDLL5k+F",
	"KoRzkvb5rZCu33Mn9/RcQf4JfJfbs99xc7hVMjQdVhN0V261cmfnVkUfjRrC5ojVSikDEj2jRuntPhs4",
	"+DYzoeigXY7fO7BaQ+qkP6R2nWNUK4Vp88pHkLPZpc4ZcxBJoJ5MUDfdk1NaHRO5cGzUCgjAleCtTDB1",
	"MpvNLlE+N4fJkm+h9dGIt2PFXaU7BTzIunMQccQENI3L9XhLRJmFAkVrRIIAKbUJI0Eq4ODwaojxbxIk",
	"oCGiL4BykQ7SzJA8HIONHnpQqaYQTt5r7/RE8DGbx8FBEK5EkPgtshLuAwoI8xPiAwojD4JuABmfHgei",
	"Bd9+/KzouZBEJqI7loQeb8FUvMhGHimaDLnDoqkQ6iDlOsLp2XzkZPJ2Ba4yGRUom+RgYApOPuM/Pi1X",
	"i+XZfHnxATt4+sfqav7p4/xiscAOPv90eTW7MCMX8/mnecUU+2MjY9VmvRlJmLspd0FHev3lAX6I7F0x",
	"Heh5K+oBk3RNWzOCnoLKKej6evoB3b3DDl5HPCQST3CSUG/vob/JrE30+iHQHu0ferRfUJ9NWWf4JgL4",
	"Koh82nI4vBZQ1IZmSl/Evm3Z7pp6TIT4HnFvtSFi08Eln4PUHGX7xd/PTscn1RgTG2J+qYhwOj6pyaCf",
	"+81XUbhVvi4bXse/0obtZ25NfM0pMC9IWzDlpB5aJ6/IQ5ky9/HW8nnKoD7Q1PTuA5mvp7qq1lUPKagq",
	"ZnQOq65qnJ++P7GTkGw7ovM4retMN+FUpgtlPOOQM9cFIYom605aTORG+d8lWtx//GeJiJ6PpFrwBi0j",
	"5IM0TyiNEsQAPCQjA6babpE2nUiFhPCN8ur+Nq6Rqeji5l6L6T8hNZ1VytZRU9y/JUGAzq6myIM1ZVTL",
	"vI64OvEPVFiKnAMSwO+oC0oeSWWgyJ9HYRixwXvifgOm9v4dcGHojt+M3oyUO6MYGIkpnuC3+idHt4m1",
	"HYckpsO78ZAkcjPkWR9a5maNIwN6aitoW069zLy1LrdTa4F/bo/8csqwtnh7oyLDnCW1SCejUUs1lGjj",
	"rpMAZVJiJ3OHXtTjid7sWY0L3N9p3+3ZazwZLDlxYWA68LvdAD0DSTWjituJoMzXHvbgDoIoDoHJXuaK",
	"/TtjFjdiUk1XoBTHQRbjw6/CwFZJow99ira+plwX+z3xEM8OJT0m/gX6j59F/yw4M3CAH7GGrJdkidNn",
	"ioQpk8AZCTTsAEf6lcoLsoTKDEkYEp6qTR17RCoaBrJrGzujzqueVRBKfAVXGs/wjSJXQ0NBfTage3DQ",
	"FELZGzYQ8n3kpY/mnHqVZTQ+CirzM+6vBcrqy81eHrsOsmj8YtHYYlAbBqlYNkfI2vkRfadyg1Shqc6N",
	"iDCvKHwPhKEk3g9D1/ETwlDZqLgHDHHwqZBGZItGFo0sGj0bGlW3Xt4PMKDUizwShBy6+lW3Bp6kBXdU",
	"aWrehj8R7jQ/Q+jGnkdhuMx4OG0FuqrdeWgMWXkL+sJqJFsjPof+Z9XiwpaILxsQs+ahbkzV2oafb7Y3",
	"VcDUeKN4EMTge767c5DUnbgWlPxpPrLcDj0IQGZd9vx/TcT8YMaObZlln3m2NMvGvUcvL2dnQcqC1AsD",
	"qXejt89pCA8YtTD9+mFaI6iGaRXWVOj/HwvWPmhzZ/80Yfp9qr+bfyyQtmdUC/8W/i38W/h/MPx/BKkR",
	"X9lAnW13QY8gEYNL19Q9OikEQTg03xN2d1tnQWg+XnxYdnj8bkn7l6VP3DHp+CS0JQarb6Vy+9mkZJOS",
	"TUo2Kb3+pGRwMC9EyksHhjFBPjCdRO52P92vpKfZ7HJfcjLXfDoLl1kQmns1L7Jy6b5h1RId5wnnwCqW",
	"zG842axhs4bNGjZr/E6lDAmC8lZlC+IdkSHKq3BdGWKR34N70Rli597kIRmiuOBnE4RNEDZB2ATx+yQI",
	"lRzcDO8MzOn2fjVd7EsTYhimvW88xGXaTAp1Q1wRnzLTaItVBVNc4tGXY24T4Gl5N0bNGJR/iaEwiQdr",
	"oouYUe0C7N4/9bBPGEH/B32iZOMtgpx0SzJukeShGfDgi3At9/Qb4T6jQqpYMN9qeTombA60OdB+k/R7",
	"ZYA/cZj+iRvbvPFqY7v9fwAAAP//Ga+apZ5OAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
